//  HomeViewModel.swift
//  Base
//
//  Created by BaoHoang on 15/10/2022.
//  Copyright (c) baohg. All rights reserved.
//
//  This file was generated by the Educa MVVM-C Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  Template created by baohg - bao15899@gmail.com

import Foundation
import RxSwift
import RxCocoa
import SwiftSoup

class HomeViewModel: BaseViewModel {
    
    struct Input {
        let getHotComic: Driver<Void>
        let getTopMonth: Driver<Void>
        let getTopWeek: Driver<Void>
        let getTopDay: Driver<Void>
    }
    
    struct Output {
        let hotComic: Driver<[ComicModel]>
    }
    
    private let bag = DisposeBag()
    private var geoData: GeoCodingModel?
    private let getCurrentWeatherSubject = PublishSubject<Void>()
    private let hotComicSubject = BehaviorSubject<[ComicModel]>(value: [])
    private let topMonthComicSubject = BehaviorSubject<[ComicModel]>(value: [])
    private let topWeekComicSubject = BehaviorSubject<[ComicModel]>(value: [])
    private let topDayComicSubject = BehaviorSubject<[ComicModel]>(value: [])
    
    
    func transform(input: Input) -> Output {
        
        input.getHotComic
            .asObservable()
            .flatMap { _ in
                return RepoFactory.TopComicRepo().getHotComic(param: ["page": 1])
            }
            .map({ data -> [ComicModel] in
                var comics: [ComicModel]?
                let results = SwiftSoupService.shared.getAllElements(document: data,
                                                                     className: "div.items div.item")
                comics = results?.map({ value in
                    let imgUrl = SwiftSoupService.shared.getAttrFromHtml(element: value,
                                                                      className: "div.image img",
                                                                      attr: "data-original")
                    let title = SwiftSoupService.shared.elementToString(element: value,
                                                                     className: "h3 a")
                    return ComicModel(image: ComicModel.getUrlImg(img: imgUrl), title: title)
                })
                return comics ?? []
            })
            .subscribe(onNext: { data in
                self.hotComicSubject.onNext(data)
            })
            .disposed(by: bag)
        
        input.getTopMonth
            .asObservable()
            .flatMap { _ in
                return RepoFactory.TopComicRepo().getTopComic(param: ["status": -1, "sort": 11])
            }
            .map({ data -> [ComicModel] in
                var comics: [ComicModel]?
                let results = SwiftSoupService.shared.getAllElements(document: data,
                                                                     className: "div.items div.item")
                comics = results?.map({ value in
                    let imgUrl = SwiftSoupService.shared.getAttrFromHtml(element: value,
                                                                      className: "div.image img",
                                                                      attr: "data-original")
                    let title = SwiftSoupService.shared.elementToString(element: value,
                                                                     className: "h3 a")
                    return ComicModel(image: ComicModel.getUrlImg(img: imgUrl), title: title)
                })
                return comics ?? []
            })
            .subscribe(onNext: { data in
                self.topMonthComicSubject.onNext(data)
            })
            .disposed(by: bag)
        
        input.getTopWeek
            .asObservable()
            .flatMap { _ in
                return RepoFactory.TopComicRepo().getTopComic(param: ["status": -1, "sort": 12])
            }
            .map({ data -> [ComicModel] in
                var comics: [ComicModel]?
                let results = SwiftSoupService.shared.getAllElements(document: data,
                                                                     className: "div.items div.item")
                comics = results?.map({ value in
                    let imgUrl = SwiftSoupService.shared.getAttrFromHtml(element: value,
                                                                      className: "div.image img",
                                                                      attr: "data-original")
                    let title = SwiftSoupService.shared.elementToString(element: value,
                                                                     className: "h3 a")
                    return ComicModel(image: ComicModel.getUrlImg(img: imgUrl), title: title)
                })
                return comics ?? []
            })
            .subscribe(onNext: { data in
                self.topWeekComicSubject.onNext(data)
            })
            .disposed(by: bag)
        
        input.getTopDay
            .asObservable()
            .flatMap { _ in
                return RepoFactory.TopComicRepo().getTopComic(param: ["status": -1, "sort": 13])
            }
            .map({ data -> [ComicModel] in
                var comics: [ComicModel]?
                let results = SwiftSoupService.shared.getAllElements(document: data,
                                                                     className: "div.items div.item")
                comics = results?.map({ value in
                    let imgUrl = SwiftSoupService.shared.getAttrFromHtml(element: value,
                                                                      className: "div.image img",
                                                                      attr: "data-original")
                    let title = SwiftSoupService.shared.elementToString(element: value,
                                                                     className: "h3 a")
                    return ComicModel(image: ComicModel.getUrlImg(img: imgUrl), title: title)
                })
                return comics ?? []
            })
            .subscribe(onNext: { data in
                self.topDayComicSubject.onNext(data)
            })
            .disposed(by: bag)
        
        let allComic = Observable.zip(hotComicSubject.skip(1), topMonthComicSubject.skip(1), topWeekComicSubject.skip(1), topDayComicSubject.skip(1))

        allComic.subscribe {(hotComic, topMonth, topWeek, topDay) in
            print(hotComic)
        }
        .disposed(by: bag)
        
        let hotComicOutput = hotComicSubject.skip(1).asDriver(onErrorJustReturn: [])

        return Output(hotComic: hotComicOutput)
    }
}
