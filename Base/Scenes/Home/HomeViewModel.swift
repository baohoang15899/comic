//  HomeViewModel.swift
//  Base
//
//  Created by BaoHoang on 15/10/2022.
//  Copyright (c) baohg. All rights reserved.
//
//  This file was generated by the Educa MVVM-C Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  Template created by baohg - bao15899@gmail.com

import Foundation
import RxSwift
import RxCocoa
import SwiftSoup

class HomeViewModel: BaseViewModel {
    
    struct Input {
        let getHotComic: Driver<Void>
        let getTopManga: Driver<Void>
        let getTopManhwa: Driver<Void>
        let getTopManhua: Driver<Void>
        let getNominate: Driver<Void>
    }
    
    struct Output {
        let homeSection: Driver<[HomeSectionData]>
    }
    
    private let bag = DisposeBag()
    private let topComicUC: TopComicUC
    
    init(topComicUC: TopComicUC) {
        self.topComicUC = topComicUC
    }
    
    var HomeSectionSubject = BehaviorSubject<[HomeSectionData]>(value: [])
    
    func transform(input: Input) -> Output {
        
        let nomiateOutput = input.getNominate
            .flatMap { _ in
                return self.topComicUC.getNominate()
                    .asDriver(onErrorJustReturn: [])
            }
        
        let hotComicOutput = input.getHotComic
            .flatMap { _ in
                return self.topComicUC.getHotComic(param: ["page": 1])
                    .asDriver(onErrorJustReturn: [])
            }
        
        let topMangaOutput = input.getTopManga
            .flatMap { _ in
                return self.topComicUC.getTopManga(param: ["status": -1, "sort": 11])
                    .asDriver(onErrorJustReturn: [])
            }
        
        let topManhwaOutput = input.getTopManhwa
            .flatMap { _ in
                return self.topComicUC.getTopManhwa(param: ["status": -1, "sort": 11])
                    .asDriver(onErrorJustReturn: [])
            }
        
        let topManhuaOutput = input.getTopManhua
            .flatMap { _ in
                return self.topComicUC.getTopManhua(param: ["status": -1, "sort": 11])
                    .asDriver(onErrorJustReturn: [])
            }
        
        let allComic = Driver.zip(nomiateOutput,hotComicOutput, topMangaOutput, topManhwaOutput, topManhuaOutput)
        
        let homeSectionOutput = allComic.map {(nominate, hotComic, topManga, topManhwa, topManhua) -> [HomeSectionData] in
            let nominateSection = HomeSectionData(header: L10n.Home.Section.nominate, items: [HomeSectionModel(data: nominate)], type: .banner)
            let hotSection = HomeSectionData(header: L10n.Home.Section.hot, items: [HomeSectionModel(data: hotComic)], type: .normal)
            let topMangaSection = HomeSectionData(header: L10n.Home.Section.topManga, items: [HomeSectionModel(data: topManga)], type: .normal)
            let topManhwaSection = HomeSectionData(header: L10n.Home.Section.topManhwa, items: [HomeSectionModel(data: topManhwa)], type: .normal)
            let topManhuaSection = HomeSectionData(header: L10n.Home.Section.topManhua, items: [HomeSectionModel(data: topManhua)], type: .normal)
            return [nominateSection, hotSection, topMangaSection, topManhwaSection, topManhuaSection]
            
        }.asDriver(onErrorJustReturn: [])
        
        return Output(homeSection: homeSectionOutput)
    }
}
