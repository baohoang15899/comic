//  SettingViewController.swift
//  Base
//
//  Created by baohoang on 24/06/2023.
//  Copyright (c) baohg. All rights reserved.
//
//  This file was generated by the Educa MVVM-C Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  Template created by baohg - bao15899@gmail.com

import UIKit
import RxSwift
import RxCocoa

class SettingViewController: BaseViewController<SettingViewModel> {
    
    private let bag = DisposeBag()
    @IBOutlet weak var tabbarHeaderView: TabbarHeaderBaseView!
    @IBOutlet weak var submitButton: UIButton!
    @IBOutlet weak var textField: UITextField!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
    
    deinit {
        print("SettingViewController deinit âœ…")
    }
    
    private func setupUI() {
        submitButton.layer.cornerRadius = 10
        submitButton.setTitle(L10n.Setting.Submit.title, for: .normal)
        submitButton.setTitleColor(.white, for: .normal)
        tabbarHeaderView.configView(title: L10n.Setting.title)
        textField.placeholder = L10n.Setting.TextField.placeholder
        textField.delegate = self
        let tap = UITapGestureRecognizer(target: self, action: #selector(dismissKeyboard))
        view.addGestureRecognizer(tap)
    }
    
    private func setupAlert() {
        let alert = UIAlertController(title: L10n.Setting.Alert.title, message: L10n.Setting.Alert.message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: L10n.Common.done, style: .default, handler: { _ in
        }))
        self.present(alert, animated: true, completion: nil)
    }
    
    //Calls this function when the tap is recognized.
    @objc private func dismissKeyboard() {
        view.endEditing(true)
    }
    
    override func bindViewModel() {
        let input = SettingViewModel.Input(domainString: textField.rx.text.orEmpty.asDriver(),
                                           submitAction: submitButton.rx.tap.asDriver())
        let output = viewModel.transform(input: input)
        
        output.isEnableButton
            .drive(submitButton.rx.isEnabled)
            .disposed(by: bag)
        
        output.showAlert
            .drive { [weak self] _ in
                self?.setupAlert()
            }
            .disposed(by: bag)
    }
}

extension SettingViewController: UITextFieldDelegate {
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
           if range.location == 0 && string == " " {
               return false
           }
           return true
     }
    
}
