//  ChapterDetailViewModel.swift
//  Base
//
//  Created by baohoang on 20/01/2023.
//  Copyright (c) baohg. All rights reserved.
//
//  This file was generated by the Educa MVVM-C Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  Template created by baohg - bao15899@gmail.com

import Foundation
import RxSwift
import RxCocoa

class ChapterDetailViewModel: BaseViewModel {
    
    struct Input {
        let getChapterDetail: Driver<Void>
        let getImgQualityRows: Driver<Void>
        let didSelectedItem: Driver<(row: Int, component: Int)>
    }
    
    struct Output {
        let chapterImageOutput: Driver<[ChapterImageModel]>
        let imgQualityRows: Driver<[ImageQualityModel]>
    }
    
    private let bag = DisposeBag()
    private let chapter: ChapterModel
    private let getChapterImgSubject = BehaviorSubject<[ChapterDetailModel]>.init(value: [])
    private let dowloadImgSubject = PublishSubject<[Data]>()
    private var chapterDetail: [ChapterImageModel] = []
    private let chapterImageSubject = BehaviorSubject<[ChapterImageModel]>(value: [])
    private let startGetChapterImgSubject = PublishSubject<Void>()
    
    var imgQuality: JPEGQuality = .medium
    
    init(chapter: ChapterModel) {
        self.chapter = chapter
    }
    
    deinit {
        print("vm deinit")
    }

    private func getChapterImages(data: [ChapterDetailModel]){
        let allObservables = data.map { RepoFactory.ChapterDetailRepo().getChapterImg(chapter: $0) }
        
        let all = Observable.from(allObservables).merge().toArray()
        
        let sortArray = all.asObservable().map { chapters in
            return chapters.sorted {
                $0.index ?? 0 < $1.index ?? 0
            }
        }
        
        sortArray.subscribe(onNext: { chapter in
            self.chapterDetail = chapter
            self.chapterImageSubject.onNext(chapter)
        })
        .disposed(by: bag)
    }
    
    func calulateImgHeight(index: Int, screenRatio: CGFloat, frameWidth: CGFloat) -> CGFloat {
        var ratio = 0.0
        if (index > 0 && index < chapterDetail.count) {
            let currentImage = chapterDetail[index].image
            if let imgHeight = currentImage?.size.height, let imgWidth = currentImage?.size.width {
                let imageCrop = imgWidth / imgHeight
                ratio = (frameWidth * (imageCrop < 0.4 ? 1.5 : imageCrop)) + screenRatio
            }
        }
        return ratio
    }
    
    func transform(input: Input) -> Output {
        
        startGetChapterImgSubject
            .flatMapLatest { [weak self] _ in
                return RepoFactory.ChapterDetailRepo().getDetailChapter(urlStrPath: self?.chapter.chapterUrl ?? "")
            }
            .map({ data -> [ChapterDetailModel] in
                let results = SwiftSoupService.shared.getAllElements(document: data,
                                                                     className: "main div.reading-detail.box_doc div.page-chapter")


                let chapters: [ChapterDetailModel] = results?.map({ value -> ChapterDetailModel in

                    let img = SwiftSoupService.shared.getAttrFromHtml(element: value, className: "img", attr: "data-original")
                    let dataIndex = SwiftSoupService.shared.getAttrFromHtml(element: value, className: "img", attr: "data-index")
                    return ChapterDetailModel(url: ChapterDetailModel.getUrlImg(img: img), dataIndex: dataIndex)
                }) ?? []

                return chapters
            })
            .subscribe(onNext: { [weak self] data in
                self?.getChapterImages(data: data)
            })
            .disposed(by: bag)
        
        let imgQualityRowsOutput = input.getImgQualityRows
            .map { _ -> [ImageQualityModel] in
                let data: [ImageQualityModel] = [
                    ImageQualityModel(title: L10n.ComicDetail.Quality.lowest, quality: .lowest),
                    ImageQualityModel(title: L10n.ComicDetail.Quality.low, quality: .low),
                    ImageQualityModel(title: L10n.ComicDetail.Quality.medium, quality: .medium),
                    ImageQualityModel(title: L10n.ComicDetail.Quality.high, quality: .high),
                    ImageQualityModel(title: L10n.ComicDetail.Quality.highest, quality: .highest),
                ]
                return data
            }
        
        input.didSelectedItem
             .asObservable()
             .withLatestFrom(imgQualityRowsOutput) { pickerData, imgQuality in
                 return imgQuality[pickerData.row]
             }
             .subscribe(onNext: { data in
                 self.imgQuality = data.quality ?? .medium
                 self.startGetChapterImgSubject.onNext(())
             })
             .disposed(by: bag)
        
        input.getChapterDetail
            .asObservable()
            .subscribe(onNext: { data in
                self.startGetChapterImgSubject.onNext(())
            })
            .disposed(by: bag)

        let chapterImageOutput = chapterImageSubject.asDriver(onErrorJustReturn: [])
        
        return Output(chapterImageOutput: chapterImageOutput, imgQualityRows: imgQualityRowsOutput)
    }
}
