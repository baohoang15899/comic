//  ChapterDetailViewModel.swift
//  Base
//
//  Created by baohoang on 20/01/2023.
//  Copyright (c) baohg. All rights reserved.
//
//  This file was generated by the Educa MVVM-C Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  Template created by baohg - bao15899@gmail.com

import Foundation
import RxSwift
import RxCocoa
import UIKit

class ChapterDetailViewModel: BaseViewModel {
    
    struct Input {
        let getChapterDetail: Driver<Void>
        let getChapterRows: Driver<Void>
        let didSelectedItem: Driver<(row: Int, component: Int)>
        let getCurrentChapter: Driver<Void>
        let nextChapter: Driver<Void>
        let previousChapter: Driver<Void>
        let goBack: Driver<Void>
    }
    
    struct Output {
        let chapterImageOutput: Driver<[ChapterImageModel]>
        let isShowConfigView: Driver<Bool>
        let comicTitle: Driver<String>
        let allChapter: Driver<[ChapterModel]>
        let chapterTitle: Driver<String>
        let currentChapterIndex: Driver<Int>
    }
    
    private let bag = DisposeBag()
    private var chapter: ChapterModel
    private let listChapter: [ChapterModel]
    private let getChapterImgSubject = BehaviorSubject<[ChapterDetailModel]>.init(value: [])
    private let dowloadImgSubject = PublishSubject<[Data]>()
    private var chapterDetail: [ChapterImageModel] = []
    private let chapterImageSubject = BehaviorSubject<[ChapterImageModel]>(value: [])
    private let chapterDetailUC: ChapterDetailUC
    private let coordinator: ComicDetailCoordinator
    private let comicName: String
    private let loadingRelay = BehaviorRelay(value: true)
    let viewOnTapSubject = PublishSubject<Void>()
    var imgQuality: JPEGQuality = .high
    
    
    init(chapter: ChapterModel, chapterDetailUC: ChapterDetailUC, coordinator: ComicDetailCoordinator, listChapter: [ChapterModel], comicName: String) {
        self.chapter = chapter
        self.listChapter = listChapter
        self.coordinator = coordinator
        self.chapterDetailUC = chapterDetailUC
        self.comicName = comicName
    }
    
    deinit {
        print("\(self) deinit")
    }
    
    private func getChapterImages(data: [ChapterDetailModel]){
        let allObservables = data.map { chapterDetailUC.getChapterImage(chapter: $0) }
        
        let all = Observable.from(allObservables).merge().toArray()
        
        let sortArray = all.asObservable().map { chapters in
            return chapters.sorted {
                $0.index ?? 0 < $1.index ?? 0
            }
        }
        
        sortArray.subscribe(onNext: { chapter in
            self.chapterDetail = chapter
            self.chapterImageSubject.onNext(chapter)
            self.loadingRelay.accept(false)
        })
        .disposed(by: bag)
    }
    
    func calulateImgHeight(index: Int, screenRatio: CGFloat, frameWidth: CGFloat) -> CGFloat {
        var ratio = 0.0
        if (index > 0 && index < chapterDetail.count) {
            let currentImage = chapterDetail[index].image
            if let imgHeight = currentImage?.size.height, let imgWidth = currentImage?.size.width {
                //                print("current height: \(imgHeight), frame width \(frameWidth), current width: \(imgWidth), width ratio: \(frameWidth/imgWidth)")
                ratio = imgHeight * (frameWidth / imgWidth)
            }
        }
        return ratio
    }
    
    func transform(input: Input) -> Output {
        
        var currentChapterTitleSubject = BehaviorSubject(value: "")
        var currentIndex = BehaviorRelay(value: 0)
        var isShowConfigView = false
        let changeChapterSubject = PublishSubject<Void>()
        let startGetChapterDetail = Driver.merge(input.getChapterDetail,
                                                 changeChapterSubject.asDriver(onErrorJustReturn: ()))

        input.nextChapter
            .asObservable()
            .subscribe(onNext: { _ in
                if (currentIndex.value > 0 && currentIndex.value < self.listChapter.count - 1 && !self.loadingRelay.value) {
                    self.chapterDetail = []
                    self.chapterImageSubject.onNext([])
                    currentIndex.accept(currentIndex.value + 1)
                    self.chapter = self.listChapter[currentIndex.value]
                    changeChapterSubject.onNext(())
                }
            })
            .disposed(by: bag)
        
        input.previousChapter
            .asObservable()
            .subscribe(onNext: { _ in
                if (currentIndex.value > 0 && !self.loadingRelay.value) {
                    self.chapterDetail = []
                    self.chapterImageSubject.onNext([])
                    currentIndex.accept(currentIndex.value - 1)
                    self.chapter = self.listChapter[currentIndex.value]
                    changeChapterSubject.onNext(())
                }
            })
            .disposed(by: bag)
        
        startGetChapterDetail
            .asObservable()
            .do(onNext: { [weak self] _ in
                self?.loadingRelay.accept(true)
                if let chapter = self?.chapter {
                    currentIndex.accept(self?.listChapter.firstIndex(of: chapter) ?? 0)
                    currentChapterTitleSubject.onNext(chapter.title ?? "")
                }
            })
                .flatMap { [weak self] _ in
                    return self?.chapterDetailUC.getChapterDetail(url: self?.chapter.chapterUrl ?? "") ?? Observable.just([])
                }
                .subscribe(onNext: { [weak self] data in
                    self?.getChapterImages(data: data)
                })
                .disposed(by: bag)
        
        let chapterRowsOutput = input.getChapterRows
            .map { _ -> [ChapterModel] in
                return self.listChapter
            }
        
        let currentChapterIndexOutput = input.getCurrentChapter
            .map({ _ -> Int in
                return self.listChapter.firstIndex { $0 == self.chapter } ?? 0
            })
        
        let isShowConfigViewOutput = viewOnTapSubject
            .map { _ -> Bool in
                isShowConfigView = !isShowConfigView
                return !isShowConfigView
            }
            .flatMap { status in
                return Observable.just(status)
            }
            .asDriver(onErrorJustReturn: true)
        
        let comicNameOutput = Observable.just(self.comicName).asDriver(onErrorJustReturn: "")
        
        let chapterTitleOutput = currentChapterTitleSubject.asDriver(onErrorJustReturn: "")
        
        input.goBack
            .asObservable()
            .subscribe(onNext: {
                self.coordinator.goBack()
            })
            .disposed(by: bag)
        
        let chapterImageOutput = chapterImageSubject.asDriver(onErrorJustReturn: [])
        
        return Output(chapterImageOutput: chapterImageOutput,
                      isShowConfigView: isShowConfigViewOutput,
                      comicTitle: comicNameOutput,
                      allChapter: chapterRowsOutput,
                      chapterTitle: chapterTitleOutput,
                      currentChapterIndex: currentChapterIndexOutput)
    }
}
