//  ChapterDetailViewController.swift
//  Base
//
//  Created by baohoang on 20/01/2023.
//  Copyright (c) baohg. All rights reserved.
//
//  This file was generated by the Educa MVVM-C Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  Template created by baohg - bao15899@gmail.com

import UIKit
import RxSwift
import RxCocoa

class ChapterDetailViewController: BaseViewController<ChapterDetailViewModel> {
    
    @IBOutlet weak var tableView: UITableView!
    
    private let bag = DisposeBag()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setNavigationBarHidden(false, animated: animated)
    }
    
    deinit {
        print("ChapterDetailViewController deinit âœ…")
    }
    
    private func setupUI() {
        tableView.delegate = self
        tableView.registerCell(type: ChapterImgTableViewCell.self)
        tableView.sectionFooterHeight = 0.01
        tableView.sectionHeaderHeight = 0.01
        tableView.separatorStyle = .none
        tableView.showsVerticalScrollIndicator = false
        tableView.estimatedRowHeight = 100
    }
    
    override func bindViewModel() {
        let input = ChapterDetailViewModel.Input(getChapterDetail: Driver.just(()))
        let output = viewModel.transform(input: input)
        
        output.chapterImageOutput
            .drive(tableView.rx.items) { tableView, index, data in
                let cell = tableView.dequeueReusableCell(type: ChapterImgTableViewCell.self, forIndexPath: IndexPath.init(row: index, section: 0))
                if let dataImg = data.image {
                    cell.configCell(data: dataImg)
                }
                return cell
            }
            .disposed(by: bag)
    }
}

extension ChapterDetailViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        var ratio = 0.0
        viewModel.chapterImageSubject.subscribe(onNext: { data in
            let currentImage = data[indexPath.row].image
            let imageCrop = (currentImage?.size.width ?? 0) / (currentImage?.size.height ?? 0)
            ratio = (tableView.frame.width * imageCrop) + 200
        })
        .disposed(by: bag)
        return ratio > 400 ? ratio : UITableView.automaticDimension
    }
}
