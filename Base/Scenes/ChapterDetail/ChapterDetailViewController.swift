//  ChapterDetailViewController.swift
//  Base
//
//  Created by baohoang on 20/01/2023.
//  Copyright (c) baohg. All rights reserved.
//
//  This file was generated by the Educa MVVM-C Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  Template created by baohg - bao15899@gmail.com

import UIKit
import RxSwift
import RxCocoa

class ChapterDetailViewController: BaseViewController<ChapterDetailViewModel> {
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var imgQualityPickerView: UIPickerView!
    @IBOutlet weak var pickerWrapperView: UIView!
    @IBOutlet weak var pickerToolBar: UIToolbar!
    
    private let bag = DisposeBag()
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setNavigationBarHidden(false, animated: animated)
        navigationItem.rightBarButtonItem = UIBarButtonItem(image: Asset.Images.ComicDetail.icComicDetailSetting.image,
                                                            style: .plain,
                                                            target: self,
                                                            action: #selector(showPickerView))
    }

    deinit {
        print("ChapterDetailViewController deinit âœ…")
    }
    
    private func setupUI() {
        tableView.delegate = self
        tableView.registerCell(type: ChapterImgTableViewCell.self)
        tableView.sectionFooterHeight = 0.01
        tableView.sectionHeaderHeight = 0.01
        tableView.separatorStyle = .none
        tableView.showsVerticalScrollIndicator = false
        tableView.estimatedRowHeight = 100
        setupPickerView()
    }
    
    private func setupPickerView() {
        let flexSpace = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        let done: UIBarButtonItem = UIBarButtonItem(title: "Done", style: .done, target: self, action: #selector(self.hidePickerView))
        pickerToolBar.items = [flexSpace, done]
        pickerWrapperView.alpha = 0.0
    }
    
    override func bindViewModel() {
        let input = ChapterDetailViewModel.Input(getChapterDetail: Driver.just(()),
                                                 getImgQualityRows: Driver.just(()),
                                                 didSelectedItem: imgQualityPickerView.rx.itemSelected.asDriver(),
                                                 getImgQualityDefault: Driver.just(()))
        
        let output = viewModel.transform(input: input)
        
        output.chapterImageOutput
            .drive(tableView.rx.items) {[weak self] tableView, index, data in
                let cell = tableView.dequeueReusableCell(type: ChapterImgTableViewCell.self, forIndexPath: IndexPath.init(row: index, section: 0))
                if let dataImg = data.image, let quality = self?.viewModel.imgQuality {
                    cell.configCell(data: dataImg, quality: quality)
                }
                return cell
            }
            .disposed(by: bag)
        
        output.imgQualityRows
            .drive(imgQualityPickerView.rx.itemTitles) { (row, element) in
                return element.title ?? ""
            }
            .disposed(by: bag)
        
        output.defaultQuality
            .drive { [weak self] row in
                self?.imgQualityPickerView.selectRow(row, inComponent: 0, animated: true)
            }
            .disposed(by: bag)
    }
    
    @objc func hidePickerView() {
        UIView.animate(withDuration: 0.2, delay: 0, animations: {
            self.pickerWrapperView.alpha = 0
            }, completion: nil)
    }
    
    @objc func showPickerView() {
        UIView.animate(withDuration: 0.2, delay: 0, animations: {
            self.pickerWrapperView.alpha = 1
            }, completion: nil)
    }
    
}

extension ChapterDetailViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let ratio = viewModel.calulateImgHeight(index: indexPath.row,
                                                screenRatio: view.frame.height / 1.7,
                                                frameWidth: view.frame.size.width)
        return ratio > 0 ? ratio : 1
    }
}
extension SharedSequenceConvertibleType {
    func mapToVoid() -> SharedSequence<SharingStrategy, Void> {
        return map { _ in }
    }
}

extension UIImageView {
    var contentClippingRect: CGRect {
        guard let image = image else { return bounds }
        guard contentMode == .scaleAspectFit else { return bounds }
        guard image.size.width > 0 && image.size.height > 0 else { return bounds }

        let scale: CGFloat
        if image.size.width > image.size.height {
            scale = bounds.width / image.size.width
        } else {
            scale = bounds.height / image.size.height
        }

        let size = CGSize(width: image.size.width * scale, height: image.size.height * scale)
        let x = (bounds.width - size.width) / 2.0
        let y = (bounds.height - size.height) / 2.0

        return CGRect(x: x, y: y, width: size.width, height: size.height)
    }
}
