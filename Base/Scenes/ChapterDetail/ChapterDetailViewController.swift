//  ChapterDetailViewController.swift
//  Base
//
//  Created by baohoang on 20/01/2023.
//  Copyright (c) baohg. All rights reserved.
//
//  This file was generated by the Educa MVVM-C Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  Template created by baohg - bao15899@gmail.com

import UIKit
import RxSwift
import RxCocoa

class ChapterDetailViewController: BaseViewController<ChapterDetailViewModel> {
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var chapterPickerView: UIPickerView!
    @IBOutlet weak var pickerWrapperView: UIView!
    @IBOutlet weak var pickerToolBar: UIToolbar!
    @IBOutlet weak var headerView: UIView!
    @IBOutlet weak var backButton: UIButton!
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var previousButton: UIButton!
    @IBOutlet weak var nextButton: UIButton!
    @IBOutlet weak var bottomView: UIView!
    @IBOutlet weak var chapterButton: UIButton!
    @IBOutlet weak var dummyHeaderViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var dummyHeaderView: UIView!
    @IBOutlet weak var bottomViewHeightConstraint: NSLayoutConstraint!
    
    private let bag = DisposeBag()
    private let doneButton = UIBarButtonItem()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setNavigationBarHidden(true, animated: animated)
    }
    
    deinit {
        print("ChapterDetailViewController deinit âœ…")
    }

    private func setupUI() {
        let tap = UITapGestureRecognizer(target: self, action: #selector(showConfigView))
        tableView.addGestureRecognizer(tap)
        tableView.delegate = self
        tableView.registerCell(type: ChapterImgTableViewCell.self)
        tableView.sectionFooterHeight = 0.01
        tableView.sectionHeaderHeight = 0.01
        tableView.separatorStyle = .none
        tableView.showsVerticalScrollIndicator = false
        tableView.estimatedRowHeight = 100
        headerView.alpha = 0
        bottomView.alpha = 0
        dummyHeaderView.alpha = 0
        chapterButton.titleLabel?.font = UIFont.boldSystemFont(ofSize: 17)
        chapterButton.setImage(Asset.Images.Common.icDownArrow.image, for: .normal)
        chapterButton.semanticContentAttribute = .forceRightToLeft
        backButton.setTitle("", for: .normal)
        previousButton.setTitle(L10n.ComicDetail.Chapter.previous, for: .normal)
        nextButton.setTitle(L10n.ComicDetail.Chapter.next, for: .normal)
        dummyHeaderViewHeightConstraint.constant = CommonMethod.getStatusBarHeight()
        bottomViewHeightConstraint.constant = (UIApplication.shared.keyWindow?.safeAreaInsets.bottom ?? 0) + 44.0
        setupPickerView()
    }
    
    private func setupPickerView() {
        let flexSpace = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        doneButton.title = L10n.Common.done
        doneButton.style = .done
        let cancel: UIBarButtonItem = UIBarButtonItem(title: L10n.Common.cancel, style: .done, target: self, action: #selector(self.hidePickerView))
        pickerToolBar.items = [cancel,flexSpace, doneButton]
        pickerWrapperView.alpha = 0.0
    }
    
    override func bindViewModel() {
        let input = ChapterDetailViewModel.Input(getChapterDetail: Driver.just(()),
                                                 getChapterRows: Driver.just(()),
                                                 didSelectedItem: chapterPickerView.rx.itemSelected.asDriver(),
                                                 willDisplayCell: tableView.rx.willDisplayCell.asDriver(),
                                                 getCurrentChapter: Driver.just(()),
                                                 nextChapter: nextButton.rx.tap.asDriver(),
                                                 previousChapter: previousButton.rx.tap.asDriver(),
                                                 submitChangeChapter: doneButton.rx.tap.asDriver(),
                                                 goBack: backButton.rx.tap.asDriver())
        
        let output = viewModel.transform(input: input)
        
        output.chapterImageOutput
            .drive(tableView.rx.items) {[weak self] tableView, index, data in
                let cell = tableView.dequeueReusableCell(type: ChapterImgTableViewCell.self, forIndexPath: IndexPath.init(row: index, section: 0))
                if let dataImg = data.image, let quality = self?.viewModel.imgQuality {
                    cell.configCell(data: dataImg, quality: quality)
                }
                return cell
            }
            .disposed(by: bag)
        
        output.allChapter
            .drive(chapterPickerView.rx.itemTitles) { (row, element) in
                return element.title ?? ""
            }
            .disposed(by: bag)

        output.currentChapterIndex
            .drive { [weak self] row in
                self?.chapterPickerView.selectRow(row, inComponent: 0, animated: true)
            }
            .disposed(by: bag)
        
        output.comicTitle
            .drive(titleLabel.rx.text)
            .disposed(by: bag)
        
        output.chapterTitle
            .drive { [weak self] title in
                self?.chapterButton.setTitle(title, for: .normal)
            }
            .disposed(by: bag)
        
        output.isShowConfigView
            .drive { [weak self] status in
                UIView.animate(withDuration: 0.2, delay: 0, animations: {
                    self?.headerView.alpha = !status ? 0 : 1
                    self?.dummyHeaderView.alpha = !status ? 0 : 1
                    self?.bottomView.alpha = !status ? 0 : 1
                }, completion: nil)
            }
            .disposed(by: bag)
        
        output.changingChapter
            .drive { [ weak self ] _ in
                self?.hidePickerView()
            }
            .disposed(by: bag)
        
        output.canNextChap
            .drive(nextButton.rx.isEnabled)
            .disposed(by: bag)
        
        output.canBackChap
            .drive(previousButton.rx.isEnabled)
            .disposed(by: bag)
        
        output.isLoading
            .drive { [weak self] isLoading in
                self?.chapterButton.isEnabled = !isLoading
            }
            .disposed(by: bag)
        
    }
    @IBAction func onChapterTap(_ sender: Any) {
        UIView.animate(withDuration: 0.2, delay: 0, animations: {
            self.pickerWrapperView.alpha = 1
        }, completion: nil)
    }
    
    @objc func hidePickerView() {
        UIView.animate(withDuration: 0.2, delay: 0, animations: {
            self.pickerWrapperView.alpha = 0
        }, completion: nil)
    }
    
    @objc func showConfigView() {
        viewModel.viewOnTapSubject.onNext(())
    }
}

extension ChapterDetailViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let ratio = viewModel.calulateImgHeight(index: indexPath.row,
                                                screenRatio: view.frame.height / 1.7,
                                                frameWidth: view.frame.size.width)
        return ratio > 0 ? ratio : 1
    }
}


