//  ChapterDetailViewController.swift
//  Base
//
//  Created by baohoang on 20/01/2023.
//  Copyright (c) baohg. All rights reserved.
//
//  This file was generated by the Educa MVVM-C Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  Template created by baohg - bao15899@gmail.com

import UIKit
import RxSwift
import RxCocoa

class ChapterDetailViewController: BaseViewController<ChapterDetailViewModel> {
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var imgQualityPickerView: UIPickerView!
    @IBOutlet weak var pickerWrapperView: UIView!
    @IBOutlet weak var pickerToolBar: UIToolbar!
    @IBOutlet weak var headerView: UIView!
    @IBOutlet weak var backButton: UIButton!
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var configButton: UIButton!
    
    private let bag = DisposeBag()
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        titleLabel.text = title ?? ""
        navigationController?.setNavigationBarHidden(true, animated: animated)
    }
    
    deinit {
        print("ChapterDetailViewController deinit âœ…")
    }
    
    private func setupUI() {
        let tap = UITapGestureRecognizer(target: self, action: #selector(showConfigView))
        tableView.addGestureRecognizer(tap)
        tableView.delegate = self
        tableView.registerCell(type: ChapterImgTableViewCell.self)
        tableView.sectionFooterHeight = 0.01
        tableView.sectionHeaderHeight = 0.01
        tableView.separatorStyle = .none
        tableView.showsVerticalScrollIndicator = false
        tableView.estimatedRowHeight = 100
        headerView.alpha = 0
        backButton.setTitle("", for: .normal)
        configButton.setTitle("", for: .normal)
        setupPickerView()
    }
    
    private func setupPickerView() {
        let flexSpace = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        let done: UIBarButtonItem = UIBarButtonItem(title: "Done", style: .done, target: self, action: #selector(self.hidePickerView))
        pickerToolBar.items = [flexSpace, done]
        pickerWrapperView.alpha = 0.0
    }
    
    override func bindViewModel() {
        let input = ChapterDetailViewModel.Input(getChapterDetail: Driver.just(()),
                                                 getImgQualityRows: Driver.just(()),
                                                 didSelectedItem: imgQualityPickerView.rx.itemSelected.asDriver(),
                                                 getImgQualityDefault: Driver.just(()),
                                                 goBack: backButton.rx.tap.asDriver())
        
        let output = viewModel.transform(input: input)
        
        output.chapterImageOutput
            .drive(tableView.rx.items) {[weak self] tableView, index, data in
                let cell = tableView.dequeueReusableCell(type: ChapterImgTableViewCell.self, forIndexPath: IndexPath.init(row: index, section: 0))
                if let dataImg = data.image, let quality = self?.viewModel.imgQuality {
                    cell.configCell(data: dataImg, quality: quality)
                }
                return cell
            }
            .disposed(by: bag)
        
        output.imgQualityRows
            .drive(imgQualityPickerView.rx.itemTitles) { (row, element) in
                return element.title ?? ""
            }
            .disposed(by: bag)
        
        output.defaultQuality
            .drive { [weak self] row in
                self?.imgQualityPickerView.selectRow(row, inComponent: 0, animated: true)
            }
            .disposed(by: bag)
        
        output.isShowConfigView
            .drive { [weak self] status in
                UIView.animate(withDuration: 0.2, delay: 0, animations: {
                    self?.headerView.alpha = status ? 0 : 1
                }, completion: nil)
            }
            .disposed(by: bag)
        
    }
    @IBAction func onConfigTap(_ sender: Any) {
        UIView.animate(withDuration: 0.2, delay: 0, animations: {
            self.pickerWrapperView.alpha = 1
        }, completion: nil)
    }
    
    @objc func hidePickerView() {
        UIView.animate(withDuration: 0.2, delay: 0, animations: {
            self.pickerWrapperView.alpha = 0
        }, completion: nil)
    }
    
    @objc func showConfigView() {
        viewModel.viewOnTapSubject.onNext(())
    }
}

extension ChapterDetailViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let ratio = viewModel.calulateImgHeight(index: indexPath.row,
                                                screenRatio: view.frame.height / 1.7,
                                                frameWidth: view.frame.size.width)
        return ratio > 0 ? ratio : 1
    }
}


