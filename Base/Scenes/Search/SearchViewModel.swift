//  SearchViewModel.swift
//  Base
//
//  Created by BaoHoang on 27/01/2023.
//  Copyright (c) baohg. All rights reserved.
//
//  This file was generated by the Educa MVVM-C Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  Template created by baohg - bao15899@gmail.com

import Foundation
import RxSwift
import RxCocoa

class SearchViewModel: BaseViewModel {
    
    struct Input {
        let searchString: Driver<String>
        let didSelectItem: Driver<ComicSuggestModel>
    }
    
    struct Output {
        let comicSuggest: Driver<[ComicSuggestModel]>
        let comicSuggestKeyIsEmpty: Driver<Bool>
        let comicSuggestDataIsEmpty: Driver<Bool>
    }
    
    deinit {
        print("vm search deinit")
    }
    
    private let bag = DisposeBag()
    private let searchUC: SearchUC
    private let coordinator: SearchCoordinator
    
    init(searchUC: SearchUC, coordinator: SearchCoordinator) {
        self.searchUC = searchUC
        self.coordinator = coordinator
    }

    func transform(input: Input) -> Output {
        
        let comicSuggestKeyIsEmpty = BehaviorSubject<Bool>(value: true)
        let comicSuggestDataIsEmpty = BehaviorSubject<Bool>(value: true)
        var keyword: String = ""
        
        input.didSelectItem
            .asObservable()
            .subscribe(onNext: { data in
                self.coordinator.navigateToComicDetail(comicDetailUrl: data.detailUrl ?? "", title: data.title ?? "")
            })
            .disposed(by: bag)
        
       let comicSuggestOutput = input.searchString
            .debounce(RxTimeInterval.milliseconds(1000)) // Wait 0.5 for changes.
            .distinctUntilChanged()
            .do(onNext: { key in
                comicSuggestKeyIsEmpty.onNext(key.count > 0)
                keyword = key
            })
            .flatMap({ key in
                return self.searchUC.searchComic(keyword: key)
                    .asDriver(onErrorJustReturn: [])
            })
            .do(onNext: { data in
                if (keyword.count > 0) {
                    comicSuggestDataIsEmpty.onNext(!data.isEmpty)
                }
            })
        
        let comicSuggestKeyIsEmptyOutput = comicSuggestKeyIsEmpty.skip(1).asDriver(onErrorJustReturn: true)
        let comicSuggestDataIsEmptyOutput = comicSuggestDataIsEmpty.skip(1).asDriver(onErrorJustReturn: true)
        
        return Output(comicSuggest: comicSuggestOutput,
                      comicSuggestKeyIsEmpty: comicSuggestKeyIsEmptyOutput,
                      comicSuggestDataIsEmpty: comicSuggestDataIsEmptyOutput)
    }
}
