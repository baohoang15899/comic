//  SearchViewModel.swift
//  Base
//
//  Created by BaoHoang on 27/01/2023.
//  Copyright (c) baohg. All rights reserved.
//
//  This file was generated by the Educa MVVM-C Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  Template created by baohg - bao15899@gmail.com

import Foundation
import RxSwift
import RxCocoa

class SearchViewModel: BaseViewModel {
    
    struct Input {
        let searchString: Driver<String>
        let didSelectItem: Driver<ComicSuggestModel>
    }
    
    struct Output {
        let comicSuggest: Driver<[ComicSuggestModel]>
        let selectedItem: Driver<ComicSuggestModel>
        let comicSuggestIsEmpty: Driver<Bool>
    }
    
    deinit {
        print("vm search deinit")
    }
    
    private let bag = DisposeBag()
    private let searchUC: SearchUC
    
    init(searchUC: SearchUC) {
        self.searchUC = searchUC
    }

    func transform(input: Input) -> Output {
        
        let comicSuggestSubjectIsEmpty = BehaviorSubject<Bool>(value: true)
        
        let selectedItemOutput = input.didSelectItem
            .map({ data -> ComicSuggestModel in
                return data
            })
        
       let comicSuggestOutput = input.searchString
            .debounce(RxTimeInterval.milliseconds(1000)) // Wait 0.5 for changes.
            .distinctUntilChanged()
            .flatMap({ key in
                return self.searchUC.searchComic(keyword: key)
                    .asDriver(onErrorJustReturn: [])
            })
            .do(onNext: { data in
                comicSuggestSubjectIsEmpty.onNext(!data.isEmpty)
            })
        
        let comicSuggestIsEmptyOutput = comicSuggestSubjectIsEmpty.skip(1).asDriver(onErrorJustReturn: true)
        
        return Output(comicSuggest: comicSuggestOutput,
                      selectedItem: selectedItemOutput,
                      comicSuggestIsEmpty: comicSuggestIsEmptyOutput)
    }
}
